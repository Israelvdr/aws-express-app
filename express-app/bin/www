#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs');
var express = require('express');
var configure_app = require('../app');
var debug = require('debug')('node-express:server');
var https = require('https');
var configure_DI = require('./dependencies');
var path = require('path');


/**
 * Configure dependenvy injection container.
 */

var di_container = configure_DI();


/**
 * Initialise and configure app.
 */

var app = express();
configure_app(app, di_container)


/**
 * Get HTTPS credentials and create server.
 */

var key_name = process.env.KEY_NAME || 'app.express-app.com';
var privateKey  = fs.readFileSync(`certificates/${key_name}.key`, 'utf8');
var certificate = fs.readFileSync(`certificates/${key_name}.crt`, 'utf8');
var credentials = {key: privateKey, cert: certificate};
var server = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(di_container.port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTPS server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTPS server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
};

function terminate(signal) {
  debug(`${signal} signal received: closing HTTPS server.`);
  try {
    console.log("Shutting down gracefully...");
    debug("Closing server ports.");
    server.close(() => {
      debug('HTTPS server closed');
      debug("Closing db connection.");
      db.disconnect();
    });
    process.exitCode = 0;
  } catch (err) {
    console.log("Graceful shutdown failed.");
    console.log(err);
    process.exitCode = 1;
  }
}

process.on('SIGINT', terminate);
process.on('SIGTERM', terminate);